name: Elixir CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: Code Quality
    
    steps:
    - name: Set up Git repository
      uses: actions/checkout@v4
      
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: '27.0'
        elixir-version: '1.18.3'
        
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
        
    - name: Restore PLT cache
      uses: actions/cache@v4
      id: plt_cache
      with:
        path: priv/plts
        key: ${{ runner.os }}-plt-27.0-1.18.3-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-plt-27.0-1.18.3-
          ${{ runner.os }}-plt-
        
    - name: Install dependencies
      run: mix deps.get
      
    - name: Check Formatting
      run: mix format --check-formatted
      
    - name: Compile
      run: mix compile --warnings-as-errors
      
    - name: Run Credo
      run: mix credo --strict
      
    - name: Create PLTs
      if: steps.plt_cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p priv/plts
        mix dialyzer --plt
        
    - name: Run Dialyzer
      run: mix dialyzer --halt-exit-status
      
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    strategy:
      matrix:
        include:
          - otp: '27.0'
            elixir: '1.18.3'
            primary: true
          - otp: '26.2'
            elixir: '1.17.3'
            primary: false
    
    steps:
    - name: Set up Git repository
      uses: actions/checkout@v4
      
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{matrix.otp}}
        elixir-version: ${{matrix.elixir}}
        
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
        
    - name: Restore build cache
      uses: actions/cache@v4
      with:
        path: _build
        key: ${{ runner.os }}-build-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.otp }}-${{ matrix.elixir }}-
          ${{ runner.os }}-build-
        
    - name: Restore PLT cache
      uses: actions/cache@v4
      id: plt_cache
      with:
        path: priv/plts
        key: ${{ runner.os }}-plt-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-plt-${{ matrix.otp }}-${{ matrix.elixir }}-
          ${{ runner.os }}-plt-
        
    - name: Install dependencies
      run: mix deps.get
      
    - name: Compile
      run: mix compile --warnings-as-errors
      
    - name: Run tests with coverage
      run: |
        mix test --cover --export-coverage default
        mix test.coverage
      
    - name: Generate coverage report
      if: matrix.primary
      run: |
        mix test.coverage --min-coverage 80
        
    - name: Upload coverage to Codecov
      if: matrix.primary
      uses: codecov/codecov-action@v4
      with:
        directory: ./cover
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-${{ matrix.otp }}-${{ matrix.elixir }}
        path: cover/
        retention-days: 7